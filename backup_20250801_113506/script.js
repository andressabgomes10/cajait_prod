document.addEventListener('DOMContentLoaded',function(){    const mobileMenuBtn = document.getElementById('mobileMenuBtn');    const mobileMenu = document.getElementById('mobileMenu');    const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');            mobileMenuBtn.addEventListener('click',function(){        mobileMenu.style.display = mobileMenu.style.display === 'block' ? 'none' : 'block'});            mobileNavLinks.forEach(link =>{        link.addEventListener('click',function(){            mobileMenu.style.display = 'none'})});            document.addEventListener('click',function(event){        if (!mobileMenuBtn.contains(event.target) && !mobileMenu.contains(event.target)){            mobileMenu.style.display = 'none'}})});document.querySelectorAll('a[href^="#"]').forEach(anchor =>{    anchor.addEventListener('click',function (e){        e.preventDefault();        const target = document.querySelector(this.getAttribute('href'));        if (target){            const headerHeight = 80;            const targetPosition = target.offsetTop - headerHeight;                        window.scrollTo({                top: targetPosition,                behavior: 'smooth'})}})});function updateActiveSection(){    const sections = document.querySelectorAll('section[id]');    const navLinks = document.querySelectorAll('.nav-link,.mobile-nav-link');    const scrollPosition = window.scrollY  100;    sections.forEach(section =>{        const sectionTop = section.offsetTop;        const sectionHeight = section.offsetHeight;        const sectionId = section.getAttribute('id');        if (scrollPosition >= sectionTop && scrollPosition < sectionTop  sectionHeight){                        navLinks.forEach(link =>{                link.classList.remove('nav-link-active')});                        const activeLink = document.querySelector(`a[href="#${sectionId}"]`);            if (activeLink){                activeLink.classList.add('nav-link-active')}}})}function toggleScrollToTop(){    const scrollToTopBtn = document.getElementById('scrollToTopBtn');    if (window.scrollY > 300){        scrollToTopBtn.classList.add('show')}else{        scrollToTopBtn.classList.remove('show')}}function scrollToTop(){    window.scrollTo({        top: 0,        behavior: 'smooth'})}window.addEventListener('scroll',() =>{    updateActiveSection();    toggleScrollToTop()});document.getElementById('contactForm').addEventListener('submit',async function(e){    e.preventDefault();        const submitBtn = document.getElementById('submitBtn');    const submitText = document.getElementById('submitText');    const formMessage = document.getElementById('formMessage');            submitBtn.disabled = true;    submitText.innerHTML = `        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="animation: spin 1s linear infinite;">            <path d="M21 12a9 9 0 11-6.219-8.56"/>        </svg>        Enviando...    `;            formMessage.style.display = 'none';    formMessage.className = 'form-message';            const formData = new FormData(this);        try{                const isLocal = window.location.hostname === 'localhost' ||                        window.location.hostname === '127.0.0.1' ||                        window.location.hostname === '';                const contactEndpoint = isLocal ? 'contact_local.php' : 'contact.php';                const response = await fetch(contactEndpoint,{            method: 'POST',            body: formData});                const result = await response.json();                if (result.success){                        formMessage.className = 'form-message success';            formMessage.innerHTML = `                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">                    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/>                    <polyline points="22,4 12,14.01 9,11.01"/>                </svg>                <div>${result.message}</div>            `;            formMessage.style.display = 'flex';                                    setTimeout(() =>{                this.reset()},1000);                                    setTimeout(() =>{                if (formMessage.classList.contains('success')){                    formMessage.style.opacity = '0';                    setTimeout(() =>{                        formMessage.style.display = 'none';                        formMessage.style.opacity = '1'},300)}},8000)}else{                        formMessage.className = 'form-message error';            formMessage.innerHTML = `                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">                    <circle cx="12" cy="12" r="10"/>                    <path d="m15 9-6 6"/>                    <path d="m9 9 6 6"/>                </svg>                <div>${result.message}</div>            `;            formMessage.style.display = 'flex'}}catch (error){                formMessage.className = 'form-message error';        formMessage.innerHTML = `            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">                <circle cx="12" cy="12" r="10"/>                <path d="m15 9-6 6"/>                <path d="m9 9 6 6"/>            </svg>            <div>❌ Erro de conexão. Verifique sua internet e tente novamente.</div>        `;        formMessage.style.display = 'flex'}            submitBtn.disabled = false;    submitText.innerHTML = `        Enviar mensagem        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">            <line x1="22" y1="2" x2="11" y2="13"/>            <polygon points="22,2 15,22 11,13 2,9 22,2"/>        </svg>    `});document.addEventListener('DOMContentLoaded',function(){    console.log('Iniciando widget de ajuda...');        const helpChatWidget = document.getElementById('helpChatWidget');    const helpChatTrigger = document.getElementById('helpChatTrigger');    const helpChatMenu = document.getElementById('helpChatMenu');    const helpMenuClose = document.getElementById('helpMenuClose');        if (!helpChatWidget || !helpChatTrigger || !helpChatMenu){        console.error('Elementos do widget não encontrados');        return}        console.log('Widget elementos encontrados,inicializando...');            helpChatWidget.style.display = 'block';    helpChatWidget.style.visibility = 'visible';    helpChatWidget.style.opacity = '1';        let isMenuOpen = false;            function openMenu(){        console.log('Abrindo menu...');        helpChatMenu.style.display = 'block';        helpChatMenu.classList.add('show');        isMenuOpen = true}            function closeMenu(){        console.log('Fechando menu...');        helpChatMenu.style.display = 'none';        helpChatMenu.classList.remove('show');        isMenuOpen = false}            helpChatTrigger.addEventListener('click',function(e){        e.preventDefault();        e.stopPropagation();        console.log('Clique no trigger detectado');                if (isMenuOpen){            closeMenu()}else{            openMenu()}});            if (helpMenuClose){        helpMenuClose.addEventListener('click',function(e){            e.preventDefault();            e.stopPropagation();            console.log('Clique no close detectado');            closeMenu()})}            document.addEventListener('click',function(event){        if (!helpChatWidget.contains(event.target) && isMenuOpen){            console.log('Clique fora detectado,fechando menu');            closeMenu()}});            const contactFormLink = helpChatMenu.querySelector('a[href="#contato"]');    if (contactFormLink){        contactFormLink.addEventListener('click',function(){            console.log('Link de contato clicado');            closeMenu()})}                helpChatWidget.style.opacity = '1';    helpChatWidget.style.visibility = 'visible';            console.log('Widget sempre visível configurado');        console.log('Widget de ajuda inicializado com sucesso!')});document.addEventListener('DOMContentLoaded',function(){    const whatsappFloat = document.getElementById('whatsappFloat');    let isVisible = true;            window.addEventListener('scroll',function(){        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;        const contactSection = document.getElementById('contato');                if (contactSection && whatsappFloat){            const contactPosition = contactSection.offsetTop;            const windowHeight = window.innerHeight;                                    if (scrollTop  windowHeight > contactPosition - 100){                if (isVisible){                    whatsappFloat.style.transform = 'translateY(100px)';                    whatsappFloat.style.opacity = '0';                    isVisible = false}}else{                if (!isVisible){                    whatsappFloat.style.transform = 'translateY(0)';                    whatsappFloat.style.opacity = '1';                    isVisible = true}}}});            if (whatsappFloat){        whatsappFloat.addEventListener('click',function(){                        console.log('WhatsApp button clicked')});                        setTimeout(() =>{            whatsappFloat.style.transform = 'translateY(0)';            whatsappFloat.style.opacity = '1'},1500)}});window.addEventListener('scroll',function(){    const header = document.querySelector('.header');    if (window.scrollY > 50){        header.style.background = 'rgba(255,255,255,0.98)';        header.style.boxShadow = '0 1px 3px rgba(0,0,0,0.1)'}else{        header.style.background = 'rgba(255,255,255,0.95)';        header.style.boxShadow = 'none'}});const observerOptions ={    threshold: 0.1,    rootMargin: '0px 0px -50px 0px'};const observer = new IntersectionObserver(function(entries){    entries.forEach(entry =>{        if (entry.isIntersecting){            entry.target.style.opacity = '1';            entry.target.style.transform = 'translateY(0)'}})},observerOptions);document.addEventListener('DOMContentLoaded',function(){    const animateElements = document.querySelectorAll('.service-card,.benefit-card,.value-card,.stat');        animateElements.forEach(el =>{        el.style.opacity = '0';        el.style.transform = 'translateY(20px)';        el.style.transition = 'opacity 0.6s ease,transform 0.6s ease';        observer.observe(el)})});